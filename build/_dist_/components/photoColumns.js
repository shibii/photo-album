import './photoColumns.css.proxy.js';
/* src\components\photoColumns.svelte generated by Svelte v3.29.0 */
import {
	SvelteComponent,
	add_render_callback,
	add_resize_listener,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	outro_and_destroy_block,
	safe_not_equal,
	space,
	transition_in,
	transition_out,
	update_keyed_each
} from "../../web_modules/svelte/internal.js";

import { overlay } from "../stores/overlay.js";
import Photo from "./photo.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	child_ctx[12] = i;
	return child_ctx;
}

// (43:4) {:else}
function create_else_block(ctx) {
	let div;
	let photo;
	let t;
	let div_resize_listener;
	let current;
	let mounted;
	let dispose;

	photo = new Photo({
			props: {
				photo: /*photo*/ ctx[10],
				sizes: /*sizes*/ ctx[3],
				alt: "generic"
			}
		});

	function click_handler_1(...args) {
		return /*click_handler_1*/ ctx[9](/*photo*/ ctx[10], ...args);
	}

	return {
		c() {
			div = element("div");
			create_component(photo.$$.fragment);
			t = space();
			attr(div, "class", "photo svelte-1j2bc9p");
			add_render_callback(() => /*div_elementresize_handler_1*/ ctx[8].call(div));
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(photo, div, null);
			append(div, t);
			div_resize_listener = add_resize_listener(div, /*div_elementresize_handler_1*/ ctx[8].bind(div));
			current = true;

			if (!mounted) {
				dispose = listen(div, "click", click_handler_1);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const photo_changes = {};
			if (dirty & /*photos*/ 1) photo_changes.photo = /*photo*/ ctx[10];
			if (dirty & /*sizes*/ 8) photo_changes.sizes = /*sizes*/ ctx[3];
			photo.$set(photo_changes);
		},
		i(local) {
			if (current) return;
			transition_in(photo.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(photo.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(photo);
			div_resize_listener();
			mounted = false;
			dispose();
		}
	};
}

// (36:4) {#if i === 1}
function create_if_block(ctx) {
	let div;
	let photo;
	let t;
	let div_resize_listener;
	let current;
	let mounted;
	let dispose;

	photo = new Photo({
			props: {
				photo: /*photo*/ ctx[10],
				sizes: /*sizes*/ ctx[3],
				alt: "generic"
			}
		});

	function click_handler(...args) {
		return /*click_handler*/ ctx[7](/*photo*/ ctx[10], ...args);
	}

	return {
		c() {
			div = element("div");
			create_component(photo.$$.fragment);
			t = space();
			attr(div, "class", "photo svelte-1j2bc9p");
			add_render_callback(() => /*div_elementresize_handler*/ ctx[6].call(div));
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(photo, div, null);
			append(div, t);
			div_resize_listener = add_resize_listener(div, /*div_elementresize_handler*/ ctx[6].bind(div));
			current = true;

			if (!mounted) {
				dispose = listen(div, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const photo_changes = {};
			if (dirty & /*photos*/ 1) photo_changes.photo = /*photo*/ ctx[10];
			if (dirty & /*sizes*/ 8) photo_changes.sizes = /*sizes*/ ctx[3];
			photo.$set(photo_changes);
		},
		i(local) {
			if (current) return;
			transition_in(photo.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(photo.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(photo);
			div_resize_listener();
			mounted = false;
			dispose();
		}
	};
}

// (34:2) {#each photos as photo, i (photo.img)}
function create_each_block(key_1, ctx) {
	let first;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*i*/ ctx[12] === 1) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let mounted;
	let dispose;
	add_render_callback(/*onwindowresize*/ ctx[5]);
	let each_value = /*photos*/ ctx[0];
	const get_key = ctx => /*photo*/ ctx[10].img;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "group svelte-1j2bc9p");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(window, "resize", /*onwindowresize*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*imgWidth, setOverlay, photos, sizes*/ 29) {
				const each_value = /*photos*/ ctx[0];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block, null, get_each_context);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { photos } = $$props;
	let viewportWidth;
	let imgWidth;

	const setOverlay = photo => {
		overlay.set(photo);
	};

	function onwindowresize() {
		$$invalidate(1, viewportWidth = window.innerWidth)
	}

	function div_elementresize_handler() {
		imgWidth = this.offsetWidth;
		$$invalidate(2, imgWidth);
	}

	const click_handler = photo => setOverlay(photo);

	function div_elementresize_handler_1() {
		imgWidth = this.offsetWidth;
		$$invalidate(2, imgWidth);
	}

	const click_handler_1 = photo => setOverlay(photo);

	$$self.$$set = $$props => {
		if ("photos" in $$props) $$invalidate(0, photos = $$props.photos);
	};

	let sizes;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*imgWidth, viewportWidth*/ 6) {
			//
			$: $$invalidate(3, sizes = `${Math.floor(imgWidth / viewportWidth * 100)}vw`);
		}
	};

	return [
		photos,
		viewportWidth,
		imgWidth,
		sizes,
		setOverlay,
		onwindowresize,
		div_elementresize_handler,
		click_handler,
		div_elementresize_handler_1,
		click_handler_1
	];
}

class PhotoColumns extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { photos: 0 });
	}
}

export default PhotoColumns;