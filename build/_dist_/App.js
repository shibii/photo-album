import './App.css.proxy.js';
/* src\App.svelte generated by Svelte v3.29.0 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import "./global.css.proxy.js";
import photos from "./stores/assets.json.proxy.js";
import { overlay } from "./stores/overlay.js";
import Gallery from "./components/gallery.js";
import { onMount } from "../web_modules/svelte.js";
import Photo from "./components/photo.js";
import Overlay from "./components/overlay.js";
import About from "./components/about.js";

function create_fragment(ctx) {
	let overlay_1;
	let t0;
	let about;
	let t1;
	let div2;
	let div0;
	let gallery;
	let updating_selected;
	let t2;
	let div1;
	let photo;
	let current;
	let mounted;
	let dispose;
	overlay_1 = new Overlay({});
	about = new About({});

	function gallery_selected_binding(value) {
		/*gallery_selected_binding*/ ctx[1].call(null, value);
	}

	let gallery_props = {};

	if (/*selected*/ ctx[0] !== void 0) {
		gallery_props.selected = /*selected*/ ctx[0];
	}

	gallery = new Gallery({ props: gallery_props });
	binding_callbacks.push(() => bind(gallery, "selected", gallery_selected_binding));

	photo = new Photo({
			props: {
				photo: /*selected*/ ctx[0],
				sizes: "75vw",
				alt: "generic"
			}
		});

	return {
		c() {
			create_component(overlay_1.$$.fragment);
			t0 = space();
			create_component(about.$$.fragment);
			t1 = space();
			div2 = element("div");
			div0 = element("div");
			create_component(gallery.$$.fragment);
			t2 = space();
			div1 = element("div");
			create_component(photo.$$.fragment);
			attr(div0, "class", "gallery svelte-182imul");
			attr(div1, "class", "photo svelte-182imul");
			attr(div2, "class", "layout svelte-182imul");
		},
		m(target, anchor) {
			mount_component(overlay_1, target, anchor);
			insert(target, t0, anchor);
			mount_component(about, target, anchor);
			insert(target, t1, anchor);
			insert(target, div2, anchor);
			append(div2, div0);
			mount_component(gallery, div0, null);
			append(div2, t2);
			append(div2, div1);
			mount_component(photo, div1, null);
			current = true;

			if (!mounted) {
				dispose = listen(div1, "click", /*click_handler*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const gallery_changes = {};

			if (!updating_selected && dirty & /*selected*/ 1) {
				updating_selected = true;
				gallery_changes.selected = /*selected*/ ctx[0];
				add_flush_callback(() => updating_selected = false);
			}

			gallery.$set(gallery_changes);
			const photo_changes = {};
			if (dirty & /*selected*/ 1) photo_changes.photo = /*selected*/ ctx[0];
			photo.$set(photo_changes);
		},
		i(local) {
			if (current) return;
			transition_in(overlay_1.$$.fragment, local);
			transition_in(about.$$.fragment, local);
			transition_in(gallery.$$.fragment, local);
			transition_in(photo.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(overlay_1.$$.fragment, local);
			transition_out(about.$$.fragment, local);
			transition_out(gallery.$$.fragment, local);
			transition_out(photo.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(overlay_1, detaching);
			if (detaching) detach(t0);
			destroy_component(about, detaching);
			if (detaching) detach(t1);
			if (detaching) detach(div2);
			destroy_component(gallery);
			destroy_component(photo);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let selected;

	onMount(() => {
		$$invalidate(0, selected = photos[Math.floor(Math.random() * photos.length)]);
	});

	function gallery_selected_binding(value) {
		selected = value;
		$$invalidate(0, selected);
	}

	const click_handler = () => overlay.set(selected);
	return [selected, gallery_selected_binding, click_handler];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;