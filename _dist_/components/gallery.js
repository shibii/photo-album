import './gallery.css.proxy.js';
/* src\components\gallery.svelte generated by Svelte v3.29.0 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	outro_and_destroy_block,
	safe_not_equal,
	space,
	toggle_class,
	transition_in,
	transition_out,
	update_keyed_each
} from "../../web_modules/svelte/internal.js";

import { onMount } from "../../web_modules/svelte.js";
import { photos } from "../stores/photos.js";
import Photo from "./photo.js";
import { iobserve } from "../../web_modules/@shibiii/svelte-iobserve.js";
import Spinner from "./spinner.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (72:2) {#each gallery as photo (photo)}
function create_each_block(key_1, ctx) {
	let div;
	let photo;
	let current;
	let mounted;
	let dispose;

	photo = new Photo({
			props: {
				photo: /*photo*/ ctx[6],
				sizes: "25vw",
				alt: "generic"
			}
		});

	function click_handler(...args) {
		return /*click_handler*/ ctx[4](/*photo*/ ctx[6], ...args);
	}

	return {
		key: key_1,
		first: null,
		c() {
			div = element("div");
			create_component(photo.$$.fragment);
			attr(div, "class", "photo svelte-wpmwyj");
			this.first = div;
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(photo, div, null);
			current = true;

			if (!mounted) {
				dispose = listen(div, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const photo_changes = {};
			if (dirty & /*gallery*/ 2) photo_changes.photo = /*photo*/ ctx[6];
			photo.$set(photo_changes);
		},
		i(local) {
			if (current) return;
			transition_in(photo.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(photo.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(photo);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t;
	let div0;
	let spinner;
	let iobserve_action;
	let current;
	let mounted;
	let dispose;
	let each_value = /*gallery*/ ctx[1];
	const get_key = ctx => /*photo*/ ctx[6];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	spinner = new Spinner({});

	return {
		c() {
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			div0 = element("div");
			create_component(spinner.$$.fragment);
			attr(div0, "class", "observer svelte-wpmwyj");
			toggle_class(div0, "allLoaded", /*allLoaded*/ ctx[2]);
			attr(div1, "id", "scrollbar");
			attr(div1, "class", "gallery svelte-wpmwyj");
		},
		m(target, anchor) {
			insert(target, div1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			append(div1, t);
			append(div1, div0);
			mount_component(spinner, div0, null);
			current = true;

			if (!mounted) {
				dispose = action_destroyer(iobserve_action = iobserve.call(null, div0, {
					onIntersect: /*iobserve_function*/ ctx[5],
					delay: 2500,
					cooldown: 500
				}));

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*selected, gallery*/ 3) {
				const each_value = /*gallery*/ ctx[1];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div1, outro_and_destroy_block, create_each_block, t, get_each_context);
				check_outros();
			}

			if (dirty & /*allLoaded*/ 4) {
				toggle_class(div0, "allLoaded", /*allLoaded*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(spinner.$$.fragment, local);
			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(spinner.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			destroy_component(spinner);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { selected } = $$props;
	let gallery = [];
	let allLoaded = false;

	const more = batchSize => {
		if (!allLoaded) {
			photos(batchSize).then(batch => {
				$$invalidate(1, gallery = [...gallery, ...batch]);
			}).catch(() => {
				$$invalidate(2, allLoaded = true);
			});
		}
	};

	onMount(() => {
		more(10);
	});

	const click_handler = photo => {
		$$invalidate(0, selected = photo);
	};

	const iobserve_function = () => more(3);

	$$self.$$set = $$props => {
		if ("selected" in $$props) $$invalidate(0, selected = $$props.selected);
	};

	return [selected, gallery, allLoaded, more, click_handler, iobserve_function];
}

class Gallery extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { selected: 0 });
	}
}

export default Gallery;